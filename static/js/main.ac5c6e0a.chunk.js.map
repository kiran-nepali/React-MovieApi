{"version":3,"sources":["MovieCard.js","SearchMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","movie","className","src","poster_path","title","release_date","vote_average","overview","SearchMovie","useState","query","setQuery","movies","setMovies","searchmve","e","a","preventDefault","url","fetch","res","json","data","console","log","results","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","key","id","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wSAEe,SAASA,EAAUC,GAC9B,IAAMC,EAAQD,EAAMC,MACpB,OACI,yBAAKC,UAAU,QACH,yBAAKA,UAAU,YAAYC,IAAG,0DAAqDF,EAAMG,eACzF,yBAAKF,UAAU,eACX,wBAAIA,UAAU,aAAaD,EAAMI,OACjC,2BAAG,iDAAuBJ,EAAMK,eAChC,2BAAG,2CAAiBL,EAAMM,eAC1B,uBAAGL,UAAU,aAAaD,EAAMO,YCRzC,SAASC,IAAc,IAAD,EAERC,mBAAS,IAFD,mBAE1BC,EAF0B,KAEpBC,EAFoB,OAGNF,mBAAS,IAHH,mBAG1BG,EAH0B,KAGnBC,EAHmB,KAK3BC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACdD,EAAEE,iBACc,mCACVC,EAHQ,4DAEE,mCAFF,iCAGmFR,EAHnF,iDAMQS,MAAMD,GANd,cAMJE,EANI,gBAOSA,EAAIC,OAPb,OAOJC,EAPI,OAQVC,QAAQC,IAAIF,EAAKG,SACjBZ,EAAUS,EAAKG,SATL,kDAYVF,QAAQG,MAAR,MAZU,0DAAH,sDAgBf,OACI,oCACA,0BAAMzB,UAAU,OAAO0B,SAAUb,GAC7B,2BAAOb,UAAU,QAAQ2B,QAAQ,SAAjC,cACA,2BAAO3B,UAAU,QAAQ4B,KAAK,OAAOC,KAAK,QAAQC,YAAY,gBAAgBC,MAAOtB,EAAOuB,SAAU,SAAClB,GAAD,OAAKJ,EAASI,EAAEmB,OAAOF,UAC7H,4BAAQ/B,UAAU,SAAS4B,KAAK,UAAhC,WAEJ,yBAAK5B,UAAU,YACVW,EAAOuB,QAAO,SAAAnC,GAAK,OAAEA,EAAMG,eAAaiC,KAAI,SAAApC,GAAK,OAC9C,kBAACF,EAAD,CAAWE,MAASA,EAAOqC,IAAMrC,EAAMsC,U,ICfxCC,E,uKAZX,OACE,yBAAKtC,UAAU,aACb,gCACE,wBAAIA,UAAU,SAAd,kBAEF,kBAACO,EAAD,W,GAPUgC,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLH,QAAQG,MAAMA,EAAMiC,c","file":"static/js/main.ac5c6e0a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function MovieCard(props){\n    const movie = props.movie;\n    return(\n        <div className=\"card\">\n                    <img className=\"cardImage\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}></img>\n                    <div className=\"cardContent\">\n                        <h3 className=\"cardTitle\">{movie.title}</h3>\n                        <p><small>RELEASE DATE : {movie.release_date}</small></p>\n                        <p><small>RATING : {movie.vote_average}</small></p>\n                        <p className=\"card_desc\">{movie.overview}</p>\n                    </div>\n                </div>   \n    )\n}","import React,{useState} from 'react';\nimport MovieCard from './MovieCard';\n\nexport default function SearchMovie(){\n\n    const [query,setQuery] = useState('');\n    const [movies,setMovies] = useState([]);\n\n    const searchmve = async (e) => {\n        e.preventDefault();\n        const api_key = \"a0eec856b60ba8dbcadff708dfb597cf\";\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=${api_key}&language=en-US&query=${query}&page=1&include_adult=false`;\n\n        try{\n            const res = await fetch(url);\n            const data = await res.json();\n            console.log(data.results);\n            setMovies(data.results);\n        \n        }catch(error){\n            console.error(error);\n        }\n    }\n\n    return(\n        <>\n        <form className=\"form\" onSubmit={searchmve}>\n            <label className=\"label\" htmlFor=\"query\">Movie Name</label>\n            <input className=\"input\" type=\"text\" name=\"query\" placeholder=\"e.g. Avengers\" value={query} onChange={(e)=>setQuery(e.target.value)}></input>\n            <button className=\"button\" type=\"submit\">Search</button>\n        </form>\n        <div className=\"cardList\">\n            {movies.filter(movie=>movie.poster_path).map(movie => (\n                <MovieCard movie = {movie} key ={movie.id}/> \n            )            \n            )}\n            \n        </div>\n        </>\n    )\n\n    \n}\n","import React from 'react';\nimport './App.css';\nimport SearchMovie from './SearchMovie';\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div className=\"container\">\n        <header >\n          <h1 className=\"title\">Movie Search </h1>\n        </header>\n        <SearchMovie/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}